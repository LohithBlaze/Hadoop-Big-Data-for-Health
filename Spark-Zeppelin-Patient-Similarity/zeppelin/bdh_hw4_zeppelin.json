{"paragraphs":[{"text":"%md\n# 1. Exploratory data analysis of dataset from the Lab\n#### First, We will do some exercise using the data we also used in Spark Lab on our course Lab page.\n#### We need to import some libraries first,","dateUpdated":"2017-03-14T14:29:19-0400","config":{"colWidth":12,"editorMode":"ace/mode/scala","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h1>1. Exploratory data analysis of dataset from the Lab</h1>\n<h4>First, We will do some exercise using the data we also used in Spark Lab on our course Lab page.</h4>\n<h4>We need to import some libraries first,</h4>\n"}]},"apps":[],"jobName":"paragraph_1489516159345_-585767474","id":"20161018-061641_440214063","dateCreated":"2017-03-14T14:29:19-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:214"},{"text":"// any import statements go here\n\nimport org.apache.commons.io.IOUtils\nimport java.net.URL\nimport java.nio.charset.Charset\nimport java.util.Date\nimport org.apache.spark.rdd.RDD\nimport java.text.SimpleDateFormat\nimport java.util.Date\n//import org.apache.spark.sql._","user":"anonymous","dateUpdated":"2017-03-15T14:18:14-0400","config":{"colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nimport org.apache.commons.io.IOUtils\n\nimport java.net.URL\n\nimport java.nio.charset.Charset\n\nimport java.util.Date\n\nimport org.apache.spark.rdd.RDD\n\nimport java.text.SimpleDateFormat\n\nimport java.util.Date\n"}]},"apps":[],"jobName":"paragraph_1489516159347_-584997977","id":"20161018-061641_596592926","dateCreated":"2017-03-14T14:29:19-0400","dateStarted":"2017-03-15T14:18:14-0400","dateFinished":"2017-03-15T14:18:15-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:215"},{"text":"%md\n#### Then, load data. We uploaded the data on S3 for easier loading","dateUpdated":"2017-03-14T14:29:19-0400","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h4>Then, load data. We uploaded the data on S3 for easier loading</h4>\n"}]},"apps":[],"jobName":"paragraph_1489516159349_-587306470","id":"20161018-061641_336159439","dateCreated":"2017-03-14T14:29:19-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:216"},{"text":"// load raw data\n\nval rawCaseEvents = sc.parallelize(\n    IOUtils.toString(\n        new URL(\"https://s3.amazonaws.com/cse8803-rlu39/hw4/case.csv\"),\n        Charset.forName(\"utf8\")).split(\"\\n\"))\n        \nval rawControlEvents = sc.parallelize(\n    IOUtils.toString(\n        new URL(\"https://s3.amazonaws.com/cse8803-rlu39/hw4/control.csv\"),\n        Charset.forName(\"utf8\")).split(\"\\n\"))","user":"anonymous","dateUpdated":"2017-03-15T14:18:17-0400","config":{"colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nrawCaseEvents: org.apache.spark.rdd.RDD[String] = ParallelCollectionRDD[838] at parallelize at <console>:64\n\nrawControlEvents: org.apache.spark.rdd.RDD[String] = ParallelCollectionRDD[839] at parallelize at <console>:62\n"}]},"apps":[],"jobName":"paragraph_1489516159352_-588460717","id":"20161018-061641_1949699663","dateCreated":"2017-03-14T14:29:19-0400","dateStarted":"2017-03-15T14:18:17-0400","dateFinished":"2017-03-15T14:18:19-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:217"},{"text":"%md\n#### Also, define case class for transforming into DataFrame","dateUpdated":"2017-03-14T14:29:19-0400","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h4>Also, define case class for transforming into DataFrame</h4>\n"}]},"apps":[],"jobName":"paragraph_1489516159353_-588845466","id":"20161018-061641_149266468","dateCreated":"2017-03-14T14:29:19-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:218"},{"text":"// Define case class\ncase class Event(patientId: String, category: String, event: String, dateOffSet: String, value: Double)","user":"anonymous","dateUpdated":"2017-03-15T14:18:21-0400","config":{"colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\ndefined class Event\n"}]},"apps":[],"jobName":"paragraph_1489516159353_-588845466","id":"20161018-061641_460627980","dateCreated":"2017-03-14T14:29:19-0400","dateStarted":"2017-03-15T14:18:21-0400","dateFinished":"2017-03-15T14:18:21-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:219"},{"text":"%md\n#### Now, you should transform the raw dat into DataFrame using defined case class, and register it as table","dateUpdated":"2017-03-14T14:29:19-0400","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h4>Now, you should transform the raw dat into DataFrame using defined case class, and register it as table</h4>\n"}]},"apps":[],"jobName":"paragraph_1489516159354_-587691219","id":"20161018-061641_95912425","dateCreated":"2017-03-14T14:29:19-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:220"},{"text":"//construct dataframe\n//TODO: transform raw data into Event\nval caseEvents = rawCaseEvents.map(s=>s.split(\",\")).map(s=>Event(s(0),\"case\",s(1), s(2),s(3).toDouble))\nval controlEvents = rawControlEvents.map(s=>s.split(\",\")).map(s=>Event(s(0),\"control\",s(1), s(2),s(3).toDouble)) \n\nval Events = caseEvents.union(controlEvents).toDF()\nEvents.registerTempTable(\"Events\")\n//Events.take(5).foreach(println)","user":"anonymous","dateUpdated":"2017-03-15T14:18:23-0400","config":{"colWidth":12,"editorMode":"ace/mode/scala","editorHide":false,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"results":{},"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\ncaseEvents: org.apache.spark.rdd.RDD[Event] = MapPartitionsRDD[841] at map at <console>:68\n\ncontrolEvents: org.apache.spark.rdd.RDD[Event] = MapPartitionsRDD[843] at map at <console>:66\n\nEvents: org.apache.spark.sql.DataFrame = [patientId: string, category: string ... 3 more fields]\n\nwarning: there was one deprecation warning; re-run with -deprecation for details\n"}]},"apps":[],"jobName":"paragraph_1489516159355_-588075968","id":"20161018-061641_1387391725","dateCreated":"2017-03-14T14:29:19-0400","dateStarted":"2017-03-15T14:18:23-0400","dateFinished":"2017-03-15T14:18:25-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:221"},{"text":"%md\n#### Also, make a query and visualize top 10 CASE patient with the highest payment","dateUpdated":"2017-03-14T14:29:19-0400","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h4>Also, make a query and visualize top 10 CASE patient with the highest payment</h4>\n"}]},"apps":[],"jobName":"paragraph_1489516159356_-589999712","id":"20161018-061641_515282949","dateCreated":"2017-03-14T14:29:19-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:222"},{"text":"%sql\n--TODO: Show the top 10 payment for case patients\nSELECT patientId, SUM(value) Y\nFROM  Events\nWHERE category = 'case'\nGROUP BY patientId\nORDER BY Y DESC\nLIMIT 10\n","user":"anonymous","dateUpdated":"2017-03-15T14:18:26-0400","config":{"colWidth":12,"graph":{"mode":"multiBarChart","height":300,"optionOpen":true,"keys":[{"name":"patientId","index":0,"aggr":"sum"}],"values":[{"name":"value","index":1,"aggr":"sum"}],"groups":[],"scatter":{}},"enabled":true,"results":{"0":{"graph":{"mode":"multiBarChart","height":300,"optionOpen":true},"helium":{}}},"editorSetting":{"language":"sql"},"editorMode":"ace/mode/sql"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"patientId\tY\n0085B4F55FFA358D\t140309.0\n019E4729585EF3DD\t115479.0\n01AC552BE839AB2B\t109008.0\n00291F39917544B1\t103552.0\n0103899F68F866F0\t101969.0\n01BE015FAF3D32D1\t88858.0\n002AB71D3224BE66\t86999.0\n01A999551906C787\t85196.0\n01546ADB01630C6C\t72610.0\n0007F12A492FD25D\t69046.0\n"}]},"apps":[],"jobName":"paragraph_1489516159358_-589230214","id":"20161018-061641_1706459139","dateCreated":"2017-03-14T14:29:19-0400","dateStarted":"2017-03-15T14:18:26-0400","dateFinished":"2017-03-15T14:18:42-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:223"},{"text":"%md\n#### Similarly, make a query and visualize top 10 CONTROL patient with the highest payment","dateUpdated":"2017-03-14T14:29:19-0400","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h4>Similarly, make a query and visualize top 10 CONTROL patient with the highest payment</h4>\n"}]},"apps":[],"jobName":"paragraph_1489516159359_-589614963","id":"20161018-061641_814643488","dateCreated":"2017-03-14T14:29:19-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:224"},{"text":"%sql\n--TODO: Show the top 10 payment for control patients\nSELECT patientId, SUM(value) Y\nFROM  Events\nWHERE category = 'control'\nGROUP BY patientId\nORDER BY Y DESC\nLIMIT 10","user":"anonymous","dateUpdated":"2017-03-15T14:19:13-0400","config":{"colWidth":12,"graph":{"mode":"multiBarChart","height":300,"optionOpen":false,"keys":[{"name":"patientId","index":0,"aggr":"sum"}],"values":[{"name":"value","index":1,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"patientId","index":0,"aggr":"sum"},"yAxis":{"name":"value","index":1,"aggr":"sum"}}},"enabled":true,"results":{"0":{"graph":{"mode":"multiBarChart","height":300,"optionOpen":false},"helium":{}}},"editorSetting":{"language":"sql"},"editorMode":"ace/mode/sql"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"patientId\tY\n51A115C3BD10C42B\t77020.0\nF637376B77D2F010\t57325.0\nB41CB1CEEC8D7830\t57076.0\nD647CA159ADBE7D9\t46806.0\n55C132E4963DB106\t41093.0\n8638D8F6AD637029\t39076.0\n2B71DDD890E5DB0E\t38406.0\n90B91E29ABA6CB82\t36280.0\n2368FF7CF1C52133\t35054.0\n834B8F485CBC597C\t33780.0\n"}]},"apps":[],"jobName":"paragraph_1489516159361_-505739703","id":"20161018-061641_1504853191","dateCreated":"2017-03-14T14:29:19-0400","dateStarted":"2017-03-15T14:19:13-0400","dateFinished":"2017-03-15T14:19:14-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:225"},{"text":"// Define helper function if needed\ndef getEventType(s: String): String = {\n    s match {\n    case diag: String if diag.startsWith(\"DIAG\") => \"DIAG\"\n    case drug: String if drug.startsWith(\"DRUG\") => \"DRUG\"\n    case proc: String if proc.startsWith(\"PROC\") => \"procedure\"\n    case \"PAYMENT\" => \"payment\"\n    case \"heartfailure\" => \"heart failure\"\n    case _ => \"otherwise\"\n    }\n}\n\nsqlc.udf.register(\"getEventType\", getEventType _)","user":"anonymous","dateUpdated":"2017-03-15T14:19:20-0400","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"results":{},"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\ngetEventType: (s: String)String\n\nres106: org.apache.spark.sql.expressions.UserDefinedFunction = UserDefinedFunction(<function1>,StringType,Some(List(StringType)))\n"}]},"apps":[],"jobName":"paragraph_1489516159362_-504585456","id":"20161018-061641_1152670418","dateCreated":"2017-03-14T14:29:19-0400","dateStarted":"2017-03-15T14:19:20-0400","dateFinished":"2017-03-15T14:19:21-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:226"},{"text":"%md\n#### Next, write a query and visualize the number of CASE/CONTROL patients for each type of event\n##### Hint: You can use `getEventType` defined above","dateUpdated":"2017-03-14T14:29:19-0400","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h4>Next, write a query and visualize the number of CASE/CONTROL patients for each type of event</h4>\n<h5>Hint: You can use <code>getEventType</code> defined above</h5>\n"}]},"apps":[],"jobName":"paragraph_1489516159362_-504585456","id":"20161018-061641_481735739","dateCreated":"2017-03-14T14:29:19-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:227"},{"text":"%sql\n--TODO: Write a SQL query to show the breakdown of number of case and control patients for different types of events(DIAG, DRUG, PROC, etc)\nSELECT category, getEventType(event), COUNT(DISTINCT patientId)\nFROM Events \nGROUP BY category,getEventType(event)\n\n\n\n","user":"anonymous","dateUpdated":"2017-03-15T14:23:28-0400","config":{"colWidth":12,"graph":{"mode":"multiBarChart","height":300,"optionOpen":false,"keys":[{"name":"event","index":1,"aggr":"sum"}],"values":[{"name":"count","index":2,"aggr":"sum"}],"groups":[{"name":"category","index":0,"aggr":"sum"}],"scatter":{"xAxis":{"name":"category","index":0,"aggr":"sum"},"yAxis":{"name":"event","index":1,"aggr":"sum"}}},"enabled":true,"results":{"0":{"graph":{"mode":"multiBarChart","height":300,"optionOpen":true,"setting":{"multiBarChart":{"stacked":false}},"commonSetting":{},"keys":[{"name":"UDF(event)","index":1,"aggr":"sum"}],"groups":[{"name":"category","index":0,"aggr":"sum"}],"values":[{"name":"count(DISTINCT patientId)","index":2,"aggr":"sum"}]},"helium":{}}},"editorSetting":{"language":"sql"},"editorMode":"ace/mode/sql","tableHide":false,"editorHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"category\tUDF(event)\tcount(DISTINCT patientId)\ncontrol\tDRUG\t195\ncase\tDIAG\t100\ncontrol\tprocedure\t59\ncontrol\tDIAG\t200\ncase\tDRUG\t98\ncase\tpayment\t100\ncontrol\tpayment\t200\ncase\tprocedure\t79\ncase\theart failure\t100\ncontrol\theart failure\t200\n"}]},"apps":[],"jobName":"paragraph_1489516159363_-504970205","id":"20161018-061641_519216183","dateCreated":"2017-03-14T14:29:19-0400","dateStarted":"2017-03-15T14:23:29-0400","dateFinished":"2017-03-15T14:23:31-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:228"},{"text":"%md\n# 2. Descriptive statistics for HW4 Data\n### Now, let's move to our HW4 again.\n#### First of all, we will define some case classes first.","dateUpdated":"2017-03-14T14:29:19-0400","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h1>2. Descriptive statistics for HW4 Data</h1>\n<h3>Now, let's move to our HW4 again.</h3>\n<h4>First of all, we will define some case classes first.</h4>\n"}]},"apps":[],"jobName":"paragraph_1489516159364_-506893950","id":"20161018-061641_1240329920","dateCreated":"2017-03-14T14:29:19-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:229"},{"text":"// Define case classes to make it easier to transform to DataFrame\n\ncase class Patient(patientID: String, sex: String, dob: String, dod: String)\ncase class LabResult(patientID: String, date: Long, labName: String, value: String)\ncase class Diagnostic(patientID: String, date: Long, icd9code: String, sequence: Int)\ncase class Medication(patientID: String, date: Long, medicine: String)","user":"anonymous","dateUpdated":"2017-03-15T14:23:40-0400","config":{"colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\ndefined class Patient\n\ndefined class LabResult\n\ndefined class Diagnostic\n\ndefined class Medication\n"}]},"apps":[],"jobName":"paragraph_1489516159365_-507278699","id":"20161018-061641_601204011","dateCreated":"2017-03-14T14:29:19-0400","dateStarted":"2017-03-15T14:23:40-0400","dateFinished":"2017-03-15T14:23:41-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:230"},{"text":"%md\n#### Then, we need to load hw4 data already given to you.\n#### Be careful, you need to CHANGE the path of the file properly.\n#### Also, it would be convenient for you to set up shared folder, if you are using Zeppelin on a virtual environment.\n#### Make given sample code work first, then complete the next loading part also.","dateUpdated":"2017-03-14T14:29:19-0400","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h4>Then, we need to load hw4 data already given to you.</h4>\n<h4>Be careful, you need to CHANGE the path of the file properly.</h4>\n<h4>Also, it would be convenient for you to set up shared folder, if you are using Zeppelin on a virtual environment.</h4>\n<h4>Make given sample code work first, then complete the next loading part also.</h4>\n"}]},"apps":[],"jobName":"paragraph_1489516159366_-506124452","id":"20161018-061641_525253742","dateCreated":"2017-03-14T14:29:19-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:231"},{"text":"// Read patient data from CSV into a dataframe. Make sure to not use the header!\n// Change the file path as required\n\nval patient = sc.textFile(\"../../data/PATIENT.csv\")\n    .map(line => line.split(\",\"))\n    .filter(line => !line(0).contains(\"subject_id\"))\n    .map(line => Patient(line(0), line(1), line(2), line(3)))\n    .toDF()\n// patient.take(5).foreach(println)","user":"anonymous","dateUpdated":"2017-03-15T14:23:43-0400","config":{"colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\npatient: org.apache.spark.sql.DataFrame = [patientID: string, sex: string ... 2 more fields]\n"}]},"apps":[],"jobName":"paragraph_1489516159367_-506509201","id":"20161018-061641_1781852624","dateCreated":"2017-03-14T14:29:19-0400","dateStarted":"2017-03-15T14:23:43-0400","dateFinished":"2017-03-15T14:23:44-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:232"},{"text":"// TODO: Similarly, read in Diagnostic. Make sure to read only the relevant columns (subject_id, date, code, sequence)\n\nval diagnostic = sc.textFile(\"../../data/DIAGNOSTIC.csv\")\n    .map(line => line.split(\",\"))\n    .filter(line => !line(0).contains(\"subject_id\"))\n    .map(line => Diagnostic(line(0), line(1).toLong, line(3), line(4).toInt))\n    .toDF()\n\n\n//diagnostic.take(5).foreach(println)","user":"anonymous","dateUpdated":"2017-03-15T14:23:46-0400","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\ndiagnostic: org.apache.spark.sql.DataFrame = [patientID: string, date: bigint ... 2 more fields]\n"}]},"apps":[],"jobName":"paragraph_1489516159368_-508432945","id":"20161018-061641_937594153","dateCreated":"2017-03-14T14:29:19-0400","dateStarted":"2017-03-15T14:23:46-0400","dateFinished":"2017-03-15T14:23:47-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:233"},{"text":"// Register the DataFrames as temp table to use SQL queries\npatient.toDF().registerTempTable(\"patient\")\ndiagnostic.toDF().registerTempTable(\"diagnostic\")","user":"anonymous","dateUpdated":"2017-03-15T14:23:49-0400","config":{"colWidth":12,"results":[],"enabled":true,"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nwarning: there was one deprecation warning; re-run with -deprecation for details\n\nwarning: there was one deprecation warning; re-run with -deprecation for details\n"}]},"apps":[],"jobName":"paragraph_1489516159369_-508817694","id":"20161018-061641_2057411432","dateCreated":"2017-03-14T14:29:19-0400","dateStarted":"2017-03-15T14:23:49-0400","dateFinished":"2017-03-15T14:23:49-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:234"},{"text":"%md\n#### Now that we have successfully loaded the data as tables, we can query them to do analysis.\n#### Discover the gender distribution in hw4 dataset. What are the number of male and female patients?","dateUpdated":"2017-03-14T14:29:19-0400","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h4>Now that we have successfully loaded the data as tables, we can query them to do analysis.</h4>\n<h4>Discover the gender distribution in hw4 dataset. What are the number of male and female patients?</h4>\n"}]},"apps":[],"jobName":"paragraph_1489516159369_-508817694","id":"20161018-061641_132253630","dateCreated":"2017-03-14T14:29:19-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:235"},{"text":"%sql\n-- TODO: Write a SQL query to determine the number of male and female patients in the data\nSELECT sex,COUNT(DISTINCT patientID)\nFROM patient\nGROUP BY sex","user":"anonymous","dateUpdated":"2017-03-15T14:26:39-0400","config":{"colWidth":12,"editorHide":false,"graph":{"mode":"pieChart","height":300,"optionOpen":true,"keys":[{"name":"sex","index":0,"aggr":"sum"}],"values":[{"name":"_c1","index":1,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"sex","index":0,"aggr":"sum"},"yAxis":{"name":"_c1","index":1,"aggr":"sum"}}},"enabled":true,"results":{"0":{"graph":{"mode":"pieChart","height":300,"optionOpen":false},"helium":{}}},"editorSetting":{"language":"sql"},"editorMode":"ace/mode/sql"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1489516159370_-507663448","id":"20161018-061641_141184765","dateCreated":"2017-03-14T14:29:19-0400","dateStarted":"2017-03-15T14:26:31-0400","dateFinished":"2017-03-15T14:26:33-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:236","results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"sex\tcount(DISTINCT patientID)\nF\t443\nM\t555\n"}]}},{"text":"%md\n#### Next, get the top 10 ICD-9 codes in diagnostics (by number of occurrences). For these top 10 codes, show the breakdown by sex.\n#### Write a SQL query and make a chart similar with the one in the homework description PDF.","dateUpdated":"2017-03-14T14:29:19-0400","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h4>Next, get the top 10 ICD-9 codes in diagnostics (by number of occurrences). For these top 10 codes, show the breakdown by sex.</h4>\n<h4>Write a SQL query and make a chart similar with the one in the homework description PDF.</h4>\n"}]},"apps":[],"jobName":"paragraph_1489516159371_-508048196","id":"20161018-061641_2070399067","dateCreated":"2017-03-14T14:29:19-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:237"},{"text":"%sql\n-- TODO: Write a SQL query to show the breakdown of count of the overall top 10 ICD-9 codes among male and female patients\n-- Try to do this in a single call without creating intermediate tables (use nested queries and/or joins)\nSELECT p.sex, d.icd9code,COUNT(*)\nFROM  patient p, diagnostic d\nwhere d.patientID=p.patientID and d.icd9code IN (SELECT icd9code FROM (SELECT icd9code,COUNT(*) AS a FROM diagnostic GROUP BY icd9code ORDER BY a DESC  LIMIT 10 ))\nGROUP BY sex,icd9code\n\n","user":"anonymous","dateUpdated":"2017-03-15T14:26:58-0400","config":{"colWidth":12,"graph":{"mode":"multiBarChart","height":300,"optionOpen":true,"keys":[{"name":"icd9code","index":0,"aggr":"sum"}],"values":[{"name":"diagCount","index":2,"aggr":"sum"}],"groups":[{"name":"sex","index":1,"aggr":"sum"}],"scatter":{"xAxis":{"name":"icd9code","index":0,"aggr":"sum"},"yAxis":{"name":"sex","index":1,"aggr":"sum"}}},"enabled":true,"results":{"0":{"graph":{"mode":"multiBarChart","height":300,"optionOpen":true,"setting":{"multiBarChart":{}},"commonSetting":{},"keys":[{"name":"icd9code","index":1,"aggr":"sum"}],"groups":[{"name":"sex","index":0,"aggr":"sum"}],"values":[{"name":"icd9code","index":1,"aggr":"sum"}]},"helium":{}}},"editorSetting":{"language":"sql"},"editorMode":"ace/mode/sql"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"sex\ticd9code\tcount(1)\nM\t428.0\t124\nF\t401.9\t164\nF\t584.9\t61\nF\t427.31\t73\nM\t427.31\t110\nF\t428.0\t106\nM\t272.0\t89\nM\t599.0\t39\nM\t401.9\t203\nF\tV29.0\t80\nM\tV29.0\t78\nF\t414.01\t75\nF\tV05.3\t77\nM\t584.9\t73\nF\t272.0\t43\nM\t250.00\t62\nF\t599.0\t65\nM\t414.01\t182\nF\t250.00\t56\nM\tV05.3\t77\n"}]},"apps":[],"jobName":"paragraph_1489516159372_-509971941","id":"20161018-061641_1519586728","dateCreated":"2017-03-14T14:29:19-0400","dateStarted":"2017-03-15T14:26:14-0400","dateFinished":"2017-03-15T14:26:23-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:238"},{"text":"%md\n# 3. Patient Similarity\nWe will use the list of similar patients you found in Q3 Random Walk with Restart or from Q2 Jaccard Similarity if you could not complete it. If you couldn't complete them both, your out of luck. To get the patient ids, check your output from either line in `Main.scala` then make a List or Set manually or save your results from your application as an RDD to load here.\n\n```\nprintln(Jaccard.jaccardSimilarityOneVsAll(patientGraph, 9))\nprintln(RandomWalk.randomWalkOneVsAll(patientGraph, 9))\n```","dateUpdated":"2017-03-14T14:29:19-0400","config":{"tableHide":false,"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h1>3. Patient Similarity</h1>\n<p>We will use the list of similar patients you found in Q3 Random Walk with Restart or from Q2 Jaccard Similarity if you could not complete it. If you couldn't complete them both, your out of luck. To get the patient ids, check your output from either line in <code>Main.scala</code> then make a List or Set manually or save your results from your application as an RDD to load here.</p>\n<pre><code>println(Jaccard.jaccardSimilarityOneVsAll(patientGraph, 9))\nprintln(RandomWalk.randomWalkOneVsAll(patientGraph, 9))\n</code></pre>\n"}]},"apps":[],"jobName":"paragraph_1489516159373_-510356690","id":"20161018-061641_1818607372","dateCreated":"2017-03-14T14:29:19-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:239"},{"text":"// TODO - Add the patient ids here or load your RDD / dataframe result\n// and register them into a temp table\n\nval list_similar_patients = List(634, 433, 145, 720, 689, 441, 914, 801, 353, 781) // change this\n\nval similar_patients = sc.parallelize(list_similar_patients)\n    .toDF(\"patientID\")\nsimilar_patients.registerTempTable(\"similar_patients\")\n\n// a helper method if you decide to use it to group your patients by dead and alive\ndef getDeadOrAlive(s: String): String = {\n   if (s.isEmpty()) \"Alive\" else \"Dead\"\n}\n\nsqlc.udf.register(\"getDeadOrAlive\", getDeadOrAlive _)","dateUpdated":"2017-03-15T14:27:11-0400","config":{"colWidth":12,"editorMode":"ace/mode/scala","tableHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nlist_similar_patients: List[Int] = List(634, 433, 145, 720, 689, 441, 914, 801, 353, 781)\n\nsimilar_patients: org.apache.spark.sql.DataFrame = [patientID: int]\n\nwarning: there was one deprecation warning; re-run with -deprecation for details\n\ngetDeadOrAlive: (s: String)String\n\nres115: org.apache.spark.sql.expressions.UserDefinedFunction = UserDefinedFunction(<function1>,StringType,Some(List(StringType)))\n"}]},"apps":[],"jobName":"paragraph_1489516159374_-509202443","id":"20161018-061641_199353453","dateCreated":"2017-03-14T14:29:19-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:240","user":"anonymous","dateFinished":"2017-03-15T14:27:13-0400","dateStarted":"2017-03-15T14:27:11-0400"},{"text":"%sql\n-- TODO: Display the gender ratio in similar patients, change the visualization to a more appropriate one\n\n-- select * from similar_patients\nSELECT sex, count(*)/10 \nFROM patient\nWHERE patientId IN (SELECT * FROM similar_patients)\nGROUP BY sex\n","dateUpdated":"2017-03-15T14:27:20-0400","config":{"colWidth":6,"editorMode":"ace/mode/sql","results":[{"graph":{"mode":"table","height":300,"optionOpen":true,"keys":[{"name":"patientID","index":0,"aggr":"sum"}],"values":[],"groups":[],"scatter":{"xAxis":{"name":"patientID","index":0,"aggr":"sum"}}},"helium":{}}],"enabled":true,"editorSetting":{"language":"sql"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"sex\t(CAST(count(1) AS DOUBLE) / CAST(10 AS DOUBLE))\nF\t0.7\nM\t0.3\n"}]},"apps":[],"jobName":"paragraph_1489516159375_-509587192","id":"20161018-061641_458995251","dateCreated":"2017-03-14T14:29:19-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:241","user":"anonymous","dateFinished":"2017-03-15T14:27:22-0400","dateStarted":"2017-03-15T14:27:20-0400"},{"text":"%sql\n-- TODO: Display the ratio of alive/dead patients in similar patients, change the visualization to a more appropriate one\n\n-- select * from similar_patients\nSELECT getDeadOrAlive(dod), count(*)/10\nFROM patient\nWHERE patientId IN (SELECT * FROM similar_patients)\nGROUP BY getDeadOrAlive(dod)","dateUpdated":"2017-03-15T14:27:16-0400","config":{"colWidth":6,"editorMode":"ace/mode/sql","results":[{"graph":{"mode":"table","height":300,"optionOpen":true,"keys":[{"name":"patientID","index":0,"aggr":"sum"}],"values":[],"groups":[],"scatter":{"xAxis":{"name":"patientID","index":0,"aggr":"sum"}}}}],"enabled":true,"editorSetting":{"language":"sql"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"UDF(dod)\t(CAST(count(1) AS DOUBLE) / CAST(10 AS DOUBLE))\nDead\t0.6\nAlive\t0.4\n"}]},"apps":[],"jobName":"paragraph_1489516159376_-499198972","id":"20161018-061641_571923533","dateCreated":"2017-03-14T14:29:19-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:242","user":"anonymous","dateFinished":"2017-03-15T14:27:18-0400","dateStarted":"2017-03-15T14:27:16-0400"},{"text":"","dateUpdated":"2017-03-14T14:29:19-0400","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1489516159376_-499198972","id":"20161018-061641_182015159","dateCreated":"2017-03-14T14:29:19-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:243"}],"name":"Tian Tan","id":"2CCNYYV3M","angularObjects":{"2CCEB8FF4:shared_process":[],"2CCH1JZY4:shared_process":[],"2CCPUQ36W:shared_process":[],"2CABM48HN:shared_process":[],"2CBSW9FPP:shared_process":[],"2CC17SXE4:shared_process":[],"2CD9UWFMT:shared_process":[],"2CDYWZHTU:shared_process":[],"2CCVZ27XZ:shared_process":[],"2CDAXRBNM:shared_process":[],"2CD84UG3B:shared_process":[],"2CCSTCVVB:shared_process":[],"2CCZCPQZP:shared_process":[],"2CB9KBUU6:shared_process":[],"2CDVKXB24:shared_process":[],"2CAS8BTZ8:shared_process":[],"2CE7XEVK7:shared_process":[],"2CAPJ5G9P:shared_process":[],"2CBXKUZCB:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}